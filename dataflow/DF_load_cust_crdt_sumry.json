{
   "name" : "DF_load_cust_crdt_sumry",
   "type" : "Microsoft.DataFactory/factories/dataflows",
   "apiVersion" : "2018-06-01",
   "properties" : {
      "type" : "MappingDataFlow",
      "typeProperties" : {
         "sources" : [ {
            "dataset" : {
               "referenceName" : "CRDT_PRFL",
               "type" : "DatasetReference"
            },
            "name" : "CRDTPRFL"
         }, {
            "dataset" : {
               "referenceName" : "sq_STG_ACCT",
               "type" : "DatasetReference"
            },
            "name" : "STGACCT"
         }, {
            "dataset" : {
               "referenceName" : "TRANS_TYP_LKP",
               "type" : "DatasetReference"
            },
            "name" : "TRANSTYPLKP"
         }, {
            "dataset" : {
               "referenceName" : "CUST_MSTR",
               "type" : "DatasetReference"
            },
            "name" : "CUSTMSTR"
         } ],
         "sinks" : [ {
            "dataset" : {
               "referenceName" : "CRDT_SUMRY",
               "type" : "DatasetReference"
            },
            "name" : "CRDTSUMRY"
         }, {
            "dataset" : {
               "referenceName" : "CUST_DTL_SUMRY",
               "type" : "DatasetReference"
            },
            "name" : "CUSTDTLSUMRY"
         } ],
         "transformations" : [ {
            "name" : "SEQGEN"
         }, {
            "name" : "aggDtlExp"
         }, {
            "name" : "explkpExp"
         }, {
            "name" : "exprtrcustdtlcrdtsmry"
         }, {
            "name" : "rtrcustdtlcrdtsmry"
         }, {
            "name" : "lkpTRANSTYPE"
         }, {
            "name" : "expCustExp"
         }, {
            "name" : "lkpCUSTMSTR1"
         }, {
            "name" : "lkpCRDTPRFL1"
         } ],
         "script" : "\n\nsource(output(\n\t\tCRDT_SCORE as double,\n\t\tCUST_ID as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> CRDTPRFL\nsource(output(\n\t\tCLSR_DT as date,\n\t\tACCT_ID as decimal(10,0),\n\t\tCR8_DT as date,\n\t\tTX_DTTM as date,\n\t\tACCT_STAT_CD as string,\n\t\tTX_ID as decimal(10,0),\n\t\tLAST_NM as string,\n\t\tBAL_AMT as decimal(10,0),\n\t\tTX_AMT as decimal(10,0),\n\t\tACCT_DESC as string,\n\t\tACCT_TYP as string,\n\t\tCRDT_LN as double,\n\t\tCUST_ID as decimal(10,0)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat:'table') ~> STGACCT\nsource(output(\n\t\tTX_TYPE_CD as string,\n\t\tACCT_ID as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> TRANSTYPLKP\nsource(output(\n\t\tFIRST_NM as string,\n\t\tACCT_ID as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> CUSTMSTR\naggDtlExp keyGenerate(output(ACCT_KEY as long),\n\tstartAt: 1L) ~> SEQGEN\nrtrcustdtlcrdtsmry@CaseaggDtlExp aggregate(groupBy(ACCT_ID),\n\to_TX_AMT = sum(TX_AMT)) ~> aggDtlExp\nlkpCRDTPRFL1 derive(o_ACCT_DESC = rtrim(ACCT_DESC)/*RTRIM(ACCT_DESC)*/) ~> explkpExp\nexplkpExp derive(exprtrcustdtlcrdtsmry_ACCT_ID=STGACCT@ACCT_ID,\n\t\t) ~> exprtrcustdtlcrdtsmry\nexprtrcustdtlcrdtsmry split(ACCT_TYP=='SB',\n\tACCT_TYP!='SB',\n\tdisjoint: true) ~> rtrcustdtlcrdtsmry@(CaseaggDtlExp,CaseCRDTSUMRY)\nSTGACCT,TRANSTYPLKP lookup(STGACCT@ACCT_ID == TRANSTYPLKP@ACCT_ID,\n\tbroadcast: 'none') ~> lkpTRANSTYPE\nlkpTRANSTYPE derive(o_ACCT_ID = TX_TYPE_CD/*o_ACCT_ID_v0*/,\n\t\to_acc_trim = rtrim(ACCT_TYP)/*RTRIM(ACCT_TYP)*/,\n\t\to_crdt_trim = ltrim(CRDT_LN)/*LTRIM(CRDT_LN)*/) ~> expCustExp\nexpCustExp,CUSTMSTR lookup(STGACCT@ACCT_ID == CUSTMSTR@ACCT_ID,\n\tbroadcast: 'none') ~> lkpCUSTMSTR1\nlkpCUSTMSTR1,CRDTPRFL lookup(STGACCT@CUST_ID == CRDTPRFL@CUST_ID,\n\tbroadcast: 'none') ~> lkpCRDTPRFL1\nrtrcustdtlcrdtsmry@CaseCRDTSUMRY sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinsertable:true,mapColumn(\n\t\tACCT_ID = exprtrcustdtlcrdtsmry_ACCT_ID,\n\t\tFIRST_NM = FIRST_NM,\n\t\tLAST_NM = LAST_NM,\n\t\tBAL_AMT = BAL_AMT,\n\t\tCRDT_SCORE = CRDT_SCORE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> CRDTSUMRY\nSEQGEN sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinsertable:true,mapColumn(\n\t\tACCT_ID = exprtrcustdtlcrdtsmry_ACCT_ID,\n\t\tACCT_TYP = o_acc_trim,\n\t\tACCT_DESC = o_ACCT_DESC,\n\t\tCR8_DT = CR8_DT,\n\t\tCRDT_LN = o_crdt_trim,\n\t\tCLSR_DT = CLSR_DT,\n\t\tACCT_STAT_CD = ACCT_STAT_CD,\n\t\tTX_ID = TX_ID,\n\t\tACCT_KEY = ACCT_KEY,\n\t\tTX_DTTM = TX_DTTM,\n\t\tTX_AMT = o_TX_AMT,\n\t\tTX_TYPE_CD = o_ACCT_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> CUSTDTLSUMRY"
      }
   },
   "dependsOn" : [ "[concat(variables('factoryId'), '/datasets/CRDT_PRFL')]", "[concat(variables('factoryId'), '/datasets/sq_STG_ACCT')]", "[concat(variables('factoryId'), '/datasets/TRANS_TYP_LKP')]", "[concat(variables('factoryId'), '/datasets/CUST_MSTR')]", "[concat(variables('factoryId'), '/datasets/CRDT_SUMRY')]", "[concat(variables('factoryId'), '/datasets/CUST_DTL_SUMRY')]" ]
}